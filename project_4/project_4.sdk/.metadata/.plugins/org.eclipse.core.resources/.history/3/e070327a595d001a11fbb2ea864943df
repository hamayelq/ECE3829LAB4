//Lab 4
//Hamayel Qureshi & Nam Tran Ngoc

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xiomodule.h"

int main() {
    init_platform();
    u32 data;
    XIOModule IOmod;

    //Part 1 set up
    u32 ver = 7;    //init pos
    u32 hor = 9;    //init pos
    u32 blockPos = 0;
    u16 move = 0;
    u16 sevenSegOut = 0;
    u8 inputBuf[10];//keyboard input buffer

    //Part 2 set up
    u16 ledButPush = 0; //primitive debouncer
    u8 ledOut = 1;      //LED output high

    u32 col = 15;   //default color, 15 is green
    u8 colBuf[4];   //buffer holding input, then shift into color

    data = XIOModule_Initialize(&IOmod, XPAR_IOMODULE_0_DEVICE_ID);
    data = XIOModule_Start(&IOmod);

    XIOModule_DiscreteWrite(&IOmod, 4, col);    //send first color!

    while(1) {  //run constantly
        //moving block logic
        data = XIOModule_Recv(&IOmod, inputBuf, 1);
        if(move == 0) {
            //if no previous movement input, check for valid input then change move to 1
            if(inputBuf[0] == 'u') {
                ver--;
                move = 1;
            }
            else if(inputBuf[0] == 'd') {
                ver++;
                move = 1;
            }
            else if(inputBuf[0] == 'r') {
                hor++;
                move = 1;
            }
            else if(inputBuf[0] == 'l') {
                hor--;
                move = 1;
            }
        }
        //set move to 0 if not pressed
        if(inputBuf[0] != 'u'
            && inputBuf[0] != 'd'
            && inputBuf[0] != 'r'
            && inputBuf[0] != 'l')
            {
                move = 0;
            }

        //wrapping around logic
        if(ver == 15) {
        	ver = 0;
        } else if(ver == -1) {
        	ver = 14;
        }

        if(hor == 20) {
        	hor = 0;
        } else if(hor == -1) {
        	ver = 19;
        }

        //send block movement
        blockPos |= hor;//first 5 bits of blockPos hold horizontal pos
        blockPos <<= 4; //horizontal left shifted by 4, keep first 4 open
        blockPos |= ver;//first 4 bits of blockPos hold ver, 9 bits in blockPos
        XIOModule_DiscreteWrite(&IOmod, 1, blockPos); //send data

        //extra credit, ask user for what color they want blocks
        if(inputBuf[0] == 'c') {
            col = 0; //color reset

            xil_printf("What is your preferred red value? Enter values from 0000 to 1111\n\r");
            int i = 4;
            while(i < 4) { //get color val
                char car = inbyte(); //grab value
                if(car = '1' || car == '0') {
                    colBuf[i] = car;
                    i++;
                }
                else
                {
                    xil_printf("I told you to input either 0s or 1s >:(");
                }
            }
            xil_printf("Your input red value is: %c%c%c%c\n\r", colBuf[0], colBuf[1], colBuf[2], colBuf[3]);
            for(int i = 0; i < 4; i++) {
                int whichShift = 0;
                if(colBuf[i] == '1') whichShift = 1;
                col |= whichShift;
                col <<= 1; //make space
            }

            xil_printf("What is your preferred blue value? Enter values from 0000 to 1111\n\r");
            int i = 4;
            while(i < 4) { //get color val
                char car = inbyte(); //grab value
                if(car = '1' || car == '0') {
                    colBuf[i] = car;
                    i++;
                }
                else
                {
                    xil_printf("I told you to input either 0s or 1s >:(");
                }
            }
            xil_printf("Your input blue value is: %c%c%c%c\n\r", colBuf[0], colBuf[1], colBuf[2], colBuf[3]);
            for(int i = 0; i < 4; i++) {
                int whichShift = 0;
                if(colBuf[i] == '1') whichShift = 1;
                col |= whichShift;
                col <<= 1; //make space
            }

            xil_printf("What is your preferred green value? Enter values from 0000 to 1111\n\r");
            int i = 4;
            while(i < 4) { //get color val
                char car = inbyte(); //grab value
                if(car = '1' || car == '0') {
                    colBuf[i] = car;
                    i++;
                }
                else
                {
                    xil_printf("I told you to input either 0s or 1s >:(");
                }
            }
            xil_printf("Your input green value is: %c%c%c%c\n\r", colBuf[0], colBuf[1], colBuf[2], colBuf[3]);
            for(int i = 0; i < 4; i++) {
                int whichShift = 0;
                if(colBuf[i] == '1') whichShift = 1;
                col |= whichShift;
                if(i != 3) col <== 1; //all 12 bits populated
            }
            XIOModule_DiscreteWrite(&IOmod, 4, col); //send color data 
        }
        

        //seven seg logic
        u16 B = ver >= 10 ? 1 : 0; //vertical tens
        u16 A = ver >= 10 ? ver-10 : ver; //vertical ones
        u16 D = hor >= 10 ? 1 : 0; //hor tens
        u16 C = hor >= 10 ? hor-10 : hor; //hor ones

        sevenSegOut |= D;
        sevenSegOut <<= 4;
        sevenSegOut |= C;
        sevenSegOut <<= 4;
        sevenSegOut |= B;
        sevenSegOut <<= 4;
        sevenSegOut |= A;
        XIOModule_DiscreteWrite(&IOmod, 2, sevenSegOut);

        //terminal display
        data = XIOModule_DiscreteRead(&IOmod, 1);
        if(data) {
            xil_printf("Welcome to Lab 4, written by Hamayel Qureshi and Nam Tran\n\r");
            xil_printf("The current block positions are: X: %d, Y: %d\n\r", hor, ver);
        }

        //LED logic
        data = XIOModule_DiscreteRead(&IOmod, 2);
        if(!ledButPush && data) {
            ledOut <<= 1; 
            if(ledOut == 16) ledOut = 1;
            ledButPush = 1;
        }
        if(!data) ledButPush = 0;
        XIOModule_DiscreteWrite(&IOmod, 3, ledOut);
        

        //reset vals
        blockPos = 0;
        inputBuf[0] = 0;
        sevenSegOut = 0;
        col = 0;
    }
    cleanup_platform();
    return 0;
}
